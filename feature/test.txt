#include <iostream>
#include <initializer_list>
#include <vector>
#include <string>
#include <map>
#include <type_traits>
#include <list>
#include <iomanip>

using namespace std;

class test
{
public:
    int row;
    int col;
    bool canUsable{true};
};

void init(list<list<test *>> &cellsbak)
{
    int coltemp=0;
    int rowtemp=0;
    for(int i=0;i<5;++i)
    {
         list<test *> listtest;
        for(int j=0;j<7;++j)
        {
            test *t=new (std::nothrow) test;
            t->row=j;
            t->col=i;
            listtest.push_back(t);
        }
        cellsbak.push_back(listtest);
    }


    for(auto cells=cellsbak.rbegin();cells!=cellsbak.rend();++cells)
    {

        for(auto cell:*cells)
        {
            if((cell->row ==3 || cell->row==4 ) && (cell->col==2 || cell->col==3))
            {
                cout<<std::setw(3)<<" "<<" "<<" ";
            }
            else
            {
                cout<<std::setw(3)<<cell->col<<","<<cell->row;
            }
        }
        cout<<endl;
    }
}

test *searchCell(list<list<test *>> &cells,test *sourceCell,int col,int row)
{
    if(col >7 || col<0 || row>4 || row<0)
    {
        return nullptr;
    }
    else
    {
        test *dest=nullptr;
        bool getce=false;
        for(auto cellsbak:cells)
        {
            for(auto cell:cellsbak)
            {
                if(cell->row==row && cell->col==col)
                {
                    getce=true;
                    dest=cell;
                    break;
                }
            }
            if(getce==true)
            {
                break;
            }
        }
        list<test *>_removeCell;
        test *getcell=dest;
        if(row<4)
        {
            getcell=searchCell(cells,sourceCell,col,row+1);
            if(getcell->canUsable)
            {
                _removeCell.push_back(dest);
                
            }

            if(getcell==nullptr)
            {
                if(abs((col-1)-sourceCell->col)<=abs((col+1)-sourceCell->row))
                {
                    getcell=searchCell(cells,sourceCell,col-1,row+1);
                }
                else
                {
                    getcell=searchCell(cells,sourceCell,col+1,row+1);
                }
            }
        }
        else
        {
            if(!(dest->canUsable))
            {
                return nullptr;
            }
            else
            {
                return dest;
            }

        }

    }
}


void printCell(list<list<test *>> &cells)
{
    for(auto cells=cellsbak.rbegin();cells!=cellsbak.rend();++cells)
    {

        for(auto cell:*cells)
        {
            if((cell->row ==3 || cell->row==4 ) && (cell->col==2 || cell->col==3))
            {
                cout<<std::setw(3)<<" "<<" "<<" ";
            }
            else
            {
                cout<<std::setw(3)<<cell->col<<","<<cell->row;
            }
        }
        cout<<endl;
    }
}

int main()
{
    list<list<test *>> cells;
    init(cells);

    return 0;
}

